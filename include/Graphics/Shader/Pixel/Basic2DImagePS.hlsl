struct PS_INPUT
{
    // SV_POSITIONはピクセルシェーダーでは通常使われませんが、
    // 頂点シェーダーの出力構造体からそのまま引き継ぐため、含めておきます。
    // 実際には描画されるピクセルのスクリーン座標に対応します。
    float4 Position : SV_POSITION;

    // 補間されたテクスチャ座標
    // この座標を使ってテクスチャのどの部分の色を取得するかを決定します。
    float2 TexCoord : TEXCOORD0;
};

//--------------------------------------------------------------------------------------
// テクスチャとサンプラーステート
//--------------------------------------------------------------------------------------

// 表示したい2D画像データが格納されるテクスチャオブジェクト
// `register(t0)` は、このテクスチャがテクスチャスロット0番にバインドされることを示します。
Texture2D    g_texture : register(t0);

// テクスチャをサンプリングするためのサンプラーステート
// フィルタリング方法（例: リニアフィルタリング）や、
// テクスチャ座標が範囲外だった場合の処理（例: クランプ）などを定義します。
// `register(s0)` は、このサンプラーステートがサンプラースロット0番にバインドされることを示します。
SamplerState g_sampler : register(s0);

//--------------------------------------------------------------------------------------
// ピクセルシェーダー (Pixel Shader)
//--------------------------------------------------------------------------------------

// PSMainはピクセルシェーダーのエントリーポイント関数です。
// 入力としてPS_INPUT構造体を受け取り、出力としてピクセルの最終色を返します。
// `SV_TARGET` セマンティクスは、この出力がレンダーターゲット（例: バックバッファ）に書き込まれることを示します。
float4 main(PS_INPUT input) : SV_TARGET
{
    // 入力されたテクスチャ座標 (`input.TexCoord`) を使って、
    // `g_texture` から色をサンプリングします。
    // サンプリングには `g_sampler` で定義された設定が適用されます。
    // `Sample` 関数は、テクスチャのRGBA（赤、緑、青、アルファ）値を `float4` 型で返します。
    float4 color = g_texture.Sample(g_sampler, input.TexCoord);

    // サンプルした色（アルファ値を含む）をそのまま出力します。
    // このアルファ値は、DirectXアプリケーション側で設定されたブレンドステートに基づいて、
    // 既存のピクセルと合成（ブレンド）される際に使用されます。
    return color;
}